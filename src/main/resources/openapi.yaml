openapi: 3.0.0
info:
  version: 1.0.1
  title: Customer Management Service
  description: Service that performs customer CRUD
  contact:
    name: Byron Delgado
    email: bydelgad@pichincha.com
servers:
  - url: http://localhost:8080
    description: Localhost

paths:
  /customer/getAll:
    get:
      tags:
        - Get Customers
      summary: Obtain the list of customers
      description: Returns the list of customers.
      operationId: GetCustomers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponse'
        "500":
          $ref: "#/components/responses/500"
        "504":
          $ref: "#/components/responses/504"

  /customer/findById/{id}:
    get:
      tags:
        - Get Customer By Id
      summary: Obtain a customer by Id
      description: Returns a customer.
      parameters:
        - name: id
          in: path
          description: Customer Id
          required: true
          schema:
            type: integer
            example: 1
      operationId: GetCustomerById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/CustomerResponse'
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "504":
          $ref: "#/components/responses/504"

  /customer/create:
    post:
      tags:
        - Create Customer
      summary: Create a new customer
      description: Returns the new customer.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      operationId: CreateCustomer
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
        "504":
          $ref: "#/components/responses/504"

  /customer/update:
    post:
      tags:
        - Update Customer
      summary: Update a customer
      description: Returns the updated customer.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      operationId: UpdateCustomer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
        "504":
          $ref: "#/components/responses/504"

                
  /customer/delete/{id}:
    delete:
      tags:
        - Delete Customer
      summary: Delete a customer by Id
      description: Returns a message
      parameters:
        - name: id
          in: path
          description: Customer Id
          required: true
          schema:
            type: integer
            example: 1
      operationId: DeleteCustomerById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Deleted!"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
        "504":
          $ref: "#/components/responses/504"

components:
  responses:
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
          example:
            title: Missing mandatory fields.
            detail: The input fields are not correct
            errors:
              - message: Bad Request
                businessMessage: The xyz field is mandatory
            instance: "022"
            type: /v1/name/pathSuffix
    "404":
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
          example:
            title: Not Found
            detail: Path not found
            instance: "404"
            type: /v1/name/pathSuffix
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
          example:
            title: Internal Server
            detail: An internal error occurred, we are reviewing it.
            instance: "0000"
            type: /v1/name/pathSuffix
            #resource: /xx/v1/yyy
    "504":
      description: Gateway Timeout
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
          example:
            title: Gateway Timeout. Request timeout exceeded. If it happens repeatedly, consider reducing the request complexity.
            detail: Gateway connection problems.
            instance: "504"
            type: /v1/name/pathSuffix
  schemas:
    CustomerResponse:
      type: object
      properties:
        id:
          type: integer
          description: Customer Id
          nullable: false
          example: 1
        password:
          type: string
          description: Password
          nullable: false
          example: helloworld123*
        status:
          type: boolean
          description: Status
          nullable: false
          example: true
        person:
          $ref: '#/components/schemas/Person'
    
    Person:
      type: object
      properties:
        id:
          type: integer
          description: Person Id
          nullable: false
          example: 1
        identification:
          type: string
          description: Identification number
          nullable: false
          example: "1751592013"
        name:
          type: string
          description: Name
          nullable: false
          example: "Byron Delgado"
        gender:
          type: string
          description: Gender
          enum: [ "Masculino", "Femenino", "Otro" ]
          nullable: false
          example: "Masculino"
        age:
          type: integer
          description: Age
          minimum: 0
          nullable: false
          example: 29
        address:
          type: string
          description: Address
          nullable: false
          example: "E11A y S81"
        phone:
          type: string
          description: Phone
          nullable: false
          example: "0985350314"

    CustomerRequest:
      type: object
      properties:
        password:
          type: string
          description: Password
          nullable: false
          example: helloworld123*
        status:
          type: boolean
          description: Status
          nullable: false
          example: true
        person:
          $ref: '#/components/schemas/Person'
    Error:
      type: object
      properties:
        message:
          type: string
          description: Detail message
          nullable: false
        businessMessage:
          type: string
          description: Business error message
          nullable: false
    Errors:
      type: object
      properties:
        title:
          type: string
          description: Technical error message
          nullable: false
          example: Missing mandatory fields.
        detail:
          type: string
          description: Message to display to the client
          nullable: false
          example: The input fields are not correct
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
          nullable: true
        instance:
          type: string
          description: Error catalog code
          nullable: false
          example: "022"
        type:
          type: string



